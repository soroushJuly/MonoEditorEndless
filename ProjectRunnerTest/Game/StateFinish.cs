using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using MonoEditorEndless.Engine;
using MonoEditorEndless.Engine.StateManager;
using MonoEditorEndless.Engine.UI;
using ProjectRunnerTest;
using System;

namespace MonoEditorEndless.Game
{
    internal class StateFinish : State
    {
        private Texture2D _background;
        private Texture2D _panel;
        private string _title;
        private ButtonList _buttonList;
        private SpriteFont _font;
        private Text _score;

        ContentManager Content;
        GraphicsDevice _graphicsDevice;

        private SessionArgs _sessionArgs;

        // Events generated by clicking buttons
        public event EventHandler GameRestart;
        public event EventHandler ToMenu;
        public event EventHandler ExitGame;
        public StateFinish(ContentManager content, GraphicsDevice graphicsDevice, SessionArgs sessionArgs)
        {
            Name = "finish";
            Content = content;
            _graphicsDevice = graphicsDevice;
            _sessionArgs = sessionArgs;
        }
        public override void Enter(object owner)
        {
            _font = Content.Load<SpriteFont>("Content/Font/File");
            _background = Content.Load<Texture2D>("Content/Texture/" + Application._project._gameConfigs.mainMenuBackground);
            // Initialize the button list with button indicator and padding between buttons
            int listWidth = 200;
            int listHeight = 200;
            GameHandle gameHandle = owner as GameHandle;
            _sessionArgs = gameHandle._sessionArgs;
            _score = new Text("",
                new Vector2(_graphicsDevice.Viewport.Width / 2 - listWidth / 2, _graphicsDevice.Viewport.Height / 2 - listHeight / 2 - 100),
                _font,
                Color.Wheat);
            _buttonList = new ButtonList(null,
                _graphicsDevice.Viewport.Width / 2 - listWidth / 2, _graphicsDevice.Viewport.Height / 2 - listHeight / 2, _font,
                (int)Application._project._gameConfigs.listPadding);
            LoadMainButtons();
        }
        public override void Execute(object owner, GameTime gameTime)
        {
            _buttonList.Update();
        }
        public override void Exit(object owner) { _buttonList.Clear(); }
        public override void Draw(GraphicsDevice graphicsDevice = null, SpriteBatch spriteBatch = null)
        {
            var lastViewport = _graphicsDevice.Viewport;
            var lastScissorBox = _graphicsDevice.ScissorRectangle;
            var lastRasterizer = _graphicsDevice.RasterizerState;
            var lastDepthStencil = _graphicsDevice.DepthStencilState;
            var lastBlendFactor = _graphicsDevice.BlendFactor;
            var lastBlendState = _graphicsDevice.BlendState;
            var lastSamplerStates = _graphicsDevice.SamplerStates;

            spriteBatch.Begin();
            spriteBatch.Draw(_background,
                new Rectangle(0, 0, graphicsDevice.Viewport.Width, graphicsDevice.Viewport.Height),
                Color.White);
            _buttonList.Draw(spriteBatch);
            _score.SetText("Score: " + _sessionArgs._points);
            _score.Draw(spriteBatch);
            spriteBatch.End();

            // TODO: these can be transfered somewhere that they called less times
            _graphicsDevice.Viewport = lastViewport;
            _graphicsDevice.ScissorRectangle = lastScissorBox;
            _graphicsDevice.RasterizerState = lastRasterizer;
            _graphicsDevice.DepthStencilState = lastDepthStencil;
            _graphicsDevice.BlendState = lastBlendState;
            _graphicsDevice.BlendFactor = lastBlendFactor;
            _graphicsDevice.SamplerStates[0] = SamplerState.LinearWrap;
        }
        private void LoadMainButtons()
        {
            Texture2D btnTexture = new Texture2D(_graphicsDevice, 1, 1);
            btnTexture.SetData(new[] { new Color(
                Application._project._gameConfigs.buttonColor.X,
                Application._project._gameConfigs.buttonColor.Y,
                Application._project._gameConfigs.buttonColor.Z
                ) });

            _buttonList.AddButton("Start Again", btnTexture, Application._project._gameConfigs.buttonSize);
            _buttonList.AddButton("Menu", btnTexture, Application._project._gameConfigs.buttonSize);
            _buttonList.AddButton("Exit", btnTexture, Application._project._gameConfigs.buttonSize);
            // Handle button selection
            _buttonList.ButtonClicked += this.HandleButtonSelection;
            // Play sound on button switch
            //_buttonList.ButtonSwitched += (object sender, EventArgs e) => { switchSound.Play(); };
        }
        private void HandleButtonSelection(object sender, Button button)
        {
            // Handle the button selection based on the name of the button
            switch (button.GetText())
            {
                case "Start Again":
                    GameRestart(this, EventArgs.Empty);
                    break;
                case "Menu":
                    ToMenu(this, EventArgs.Empty);
                    break;
                case "Exit":
                    ExitGame(this, EventArgs.Empty);
                    break;
                default:
                    break;
            }
            // Play the sound effect related to the select button
            //selectSound.Play();
        }
    }
}
